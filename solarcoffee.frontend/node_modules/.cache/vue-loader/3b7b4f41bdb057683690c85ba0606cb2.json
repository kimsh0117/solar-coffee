{"remainingRequest":"/Users/kimsanghun/Documents/SolarCoffee/solarcoffee.frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kimsanghun/Documents/SolarCoffee/solarcoffee.frontend/src/views/Orders.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/kimsanghun/Documents/SolarCoffee/solarcoffee.frontend/src/views/Orders.vue","mtime":1615708945793},{"path":"/Users/kimsanghun/Documents/SolarCoffee/solarcoffee.frontend/node_modules/cache-loader/dist/cjs.js","mtime":1615150631837},{"path":"/Users/kimsanghun/Documents/SolarCoffee/solarcoffee.frontend/node_modules/babel-loader/lib/index.js","mtime":1615150631849},{"path":"/Users/kimsanghun/Documents/SolarCoffee/solarcoffee.frontend/node_modules/ts-loader/index.js","mtime":1615150637072},{"path":"/Users/kimsanghun/Documents/SolarCoffee/solarcoffee.frontend/node_modules/cache-loader/dist/cjs.js","mtime":1615150631837},{"path":"/Users/kimsanghun/Documents/SolarCoffee/solarcoffee.frontend/node_modules/vue-loader/lib/index.js","mtime":1615150641385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKaW1wb3J0IHsgQ29tcG9uZW50LCBWdWUgfSBmcm9tICJ2dWUtcHJvcGVydHktZGVjb3JhdG9yIjsKaW1wb3J0IHsgU2FsZXNPcmRlciB9IGZyb20gIkAvdHlwZXMvT3JkZXIiOwppbXBvcnQgeyBMaW5lSXRlbSB9IGZyb20gIkAvdHlwZXMvSW52b2ljZSI7CmltcG9ydCB7IE9yZGVyU2VydmljZSB9IGZyb20gIkAvc2VydmljZXMiOwoKY29uc3QgX29yZGVyU2VydmljZSA9IG5ldyBPcmRlclNlcnZpY2UoKTsKCkBDb21wb25lbnQoewogIG5hbWU6ICJPcmRlcnMiLAogIGNvbXBvbmVudHM6IHt9Cn0pCmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9yZGVycyBleHRlbmRzIFZ1ZSB7CiAgb3JkZXJzOiBTYWxlc09yZGVyW10gPSBbXTsKICBnZXRTdGF0dXMoaXNQYWlkOiBib29sZWFuKSB7CiAgICByZXR1cm4gaXNQYWlkID8gIlBhaWQgaW4gRnVsbCIgOiAiVW5wYWlkIjsKICB9CiAgZ2V0VG90YWwobGluZUl0ZW06IFNhbGVzT3JkZXIpIHsKICAgIHJldHVybiBsaW5lSXRlbS5zYWxlc09yZGVySXRlbXMucmVkdWNlKAogICAgICAoY3VycmVudCwgaXRlbTogTGluZUl0ZW0pID0+CiAgICAgICAgY3VycmVudCArIGl0ZW0ucXVhbnRpdHkgKiBpdGVtLnByb2R1Y3Q/LnByaWNlLAogICAgICAwCiAgICApOwogIH0KICBhc3luYyBtYXJrQ29tcGxldGUoaWQ6IG51bWJlcikgewogICAgYXdhaXQgX29yZGVyU2VydmljZS5tYXJrT3JkZXJDb21wbGV0ZShpZCk7CiAgICBhd2FpdCB0aGlzLmluaXRpYWxpemUoKTsKICB9CiAgYXN5bmMgaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHsKICAgIHRoaXMub3JkZXJzID0gYXdhaXQgX29yZGVyU2VydmljZS5nZXRBbGxPcmRlcnMoKTsKICB9CiAgYXN5bmMgY3JlYXRlZCgpIHsKICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZSgpOwogIH0KfQo="},{"version":3,"sources":["Orders.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Orders.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"orders-container\">\n    <h1 id=\"ordersTitle\">Sales Orders</h1>\n    <hr />\n    <table class=\"table\" id=\"sales-orders\" v-if=\"orders.length\">\n      <thead>\n        <tr>\n          <th>CustomerId</th>\n          <th>OrderId</th>\n          <th>Order Total</th>\n          <th>Order Status</th>\n          <th>Mark Complete</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"lineItem in orders\" :key=\"lineItem.id\">\n          <td>{{ lineItem.customer.id }}</td>\n          <td>{{ lineItem.id }}</td>\n          <td>{{ getTotal(lineItem) | price }}</td>\n          <td :class=\"{ green: lineItem.isPaid }\">\n            {{ getStatus(lineItem.isPaid) }}\n          </td>\n          <td>\n            <div\n              v-if=\"!lineItem.isPaid\"\n              class=\"lni lni-checkmark-circle green order-complete\"\n              @click=\"markComplete(lineItem.id)\"\n            ></div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue } from \"vue-property-decorator\";\nimport { SalesOrder } from \"@/types/Order\";\nimport { LineItem } from \"@/types/Invoice\";\nimport { OrderService } from \"@/services\";\n\nconst _orderService = new OrderService();\n\n@Component({\n  name: \"Orders\",\n  components: {}\n})\nexport default class Orders extends Vue {\n  orders: SalesOrder[] = [];\n  getStatus(isPaid: boolean) {\n    return isPaid ? \"Paid in Full\" : \"Unpaid\";\n  }\n  getTotal(lineItem: SalesOrder) {\n    return lineItem.salesOrderItems.reduce(\n      (current, item: LineItem) =>\n        current + item.quantity * item.product?.price,\n      0\n    );\n  }\n  async markComplete(id: number) {\n    await _orderService.markOrderComplete(id);\n    await this.initialize();\n  }\n  async initialize(): Promise<void> {\n    this.orders = await _orderService.getAllOrders();\n  }\n  async created() {\n    await this.initialize();\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"src/scss/global.scss\";\n.green {\n  font-weight: bold;\n  color: $solar-green;\n}\n.inventory-actions {\n  display: flex;\n  margin-bottom: 0.8rem;\n}\n.order-complete {\n  cursor: pointer;\n}\n</style>\n"]}]}